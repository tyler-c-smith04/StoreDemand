# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
# Remove the $ and , from price and service fee, then convert to numeric
abnb$price <- gsub('[^[:alnum:] ]','',abnb$price)
abnb$price <- as.numeric(abnb$price)
abnb$`service fee` <- gsub('[^[:alnum:] ]','',abnb$`service fee`)
abnb$`service fee` <- as.numeric(abnb$`service fee`)
glimpse(abnb)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(avg_price = mean(price))
abnb %>%
count(`neighbourhood group`)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(avg_price = mean(price))
abnb %>%
group_by(`neighbourhood group`) %>%
aggregate(price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(pricex))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(price))
abnb
abnb %>%
filter(`neighbourhood group` == 'Bronx')
bronx <- abnb %>%
filter(`neighbourhood group` == 'Bronx')
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(round(price)))
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price)),2)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price),2))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(price))
library(tidyverse)
library(rvest)
url <- https://www.espn.com/nba/player/stats/_/id/3908845/john-collins
url <- 'https://www.espn.com/nba/player/stats/_/id/3908845/john-collins'
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
pen_preds <- predict(preg_wf, new_data = test) %>% #This predicts log(count)
mutate(.pred=exp(.pred)) %>% # Back-transform the log to original scale
bind_cols(., test) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Write that dataset to a csv file
vroom_write(predictions, 'predictions.csv', ",")
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
## Bike Share Clean Code
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
install.packages('embed')
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed)
train <- vroom("./train.csv")
train <- vroom("./train.csv")
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
abnb <- abnb %>%
select(id, host_id, host_id, host_name, host_identity_verified, neighbourhood_group, neighbourhood, lat, long, room_type,
Construction_year, price) %>%
filter(host_identity_verified == 'verified')
# Transform the price column and convert Construction_year to factor
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric()) %>%
mutate(Construction_year = as.factor(Construction_year))
# Transform the price column
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric())
# Count NA's in columns
na_count <- colSums(is.na(abnb))
abnb <- abnb %>%
drop_na(neighbourhood_group, neighbourhood, lat, long)
# Check to make sure that the NA's are removed from the groups that I wanted
sum(is.na(abnb$neighbourhood_group))
sum(is.na(abnb$neighbourhood))
sum(is.na(abnb$lat))
sum(is.na(abnb$long))
unique(abnb$neighbourhood_group)
# Change misspelled values in neighbourhood_group to make sure they match the real value
abnb <- abnb %>%
mutate(neighbourhood_group = case_when(
neighbourhood_group == "brookln" ~ "Brooklyn",
neighbourhood_group == "manhatan" ~ "Manhattan",
TRUE ~ neighbourhood_group # This makes sure that other values are unchanged
))
unique(abnb$neighbourhood_group)
vroom_write(abnb, ".\abnb.csv", delim = ",")
view(abnb)
library(readr)
Nascar_Loop_Data <- read_csv("Development/Projects/Nascar Loop Data.csv")
View(Nascar_Loop_Data)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
problems()
view(abnb)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets allowed"))
# Count listings that mention not allowing pets
no_pets <- sum(str_detect(abnb$house_rules, "no pets"))
cat("Number of listings that allow pets:", pets_allowed, "\n")
cat("Number of listings that do not allow pets:", no_pets, "\n")
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets"))
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets"))
pets_allowed
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Filter rows where 'house_rules' mentions 'pets'
pets <- abnb %>%
filter(str_detect(house_rules, "pet"))
# View the filtered data
head(pets)
view(pets)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Filter rows where 'house_rules' mentions 'pets'
pets <- abnb %>%
filter(str_detect(house_rules, "no pets"))
# View the filtered data
head(pets)
# Filter rows where 'house_rules' mentions 'pets'
no_pets <- abnb %>%
filter(str_detect(house_rules, "no pets"))
view(no_pets)
install.packages('doParallel')
library(readr)
nfl_suspensions_data <- read_csv("Downloads/nfl-suspensions-data.csv")
View(nfl_suspensions_data)
library(tidvyerse)
nfl_suspensions <- read_csv("Downloads/nfl-suspensions-data.csv")
suspensions_per_year <- nfl_suspensions %>%
group_by(year) %>%
summarise(count = n())
print(suspensions_per_year)
getwd()
library(tidvyerse)
library(tidvyerse)
install.packages('tidyverser')
install.packages('tidyverse')
install.packages("tidyverse")
library(tidvyerse)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
abnb <- abnb %>%
select(id, host_id, host_id, host_name, host_identity_verified, neighbourhood_group, neighbourhood, lat, long, room_type,
Construction_year, price) %>%
filter(host_identity_verified == 'verified')
# Transform the price column and convert Construction_year to factor
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric()) %>%
mutate(Construction_year = as.factor(Construction_year))
# Transform the price column
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric())
# Count NA's in columns
na_count <- colSums(is.na(abnb))
abnb <- abnb %>%
drop_na(neighbourhood_group, neighbourhood, lat, long)
# Check to make sure that the NA's are removed from the groups that I wanted
sum(is.na(abnb$neighbourhood_group))
sum(is.na(abnb$neighbourhood))
sum(is.na(abnb$lat))
sum(is.na(abnb$long))
unique(abnb$neighbourhood_group)
# Change misspelled values in neighbourhood_group to make sure they match the real value
abnb <- abnb %>%
mutate(neighbourhood_group = case_when(
neighbourhood_group == "brookln" ~ "Brooklyn",
neighbourhood_group == "manhatan" ~ "Manhattan",
TRUE ~ neighbourhood_group # This makes sure that other values are unchanged
))
unique(abnb$neighbourhood_group)
view(abnb)
view(abnb)
view(abnb2)
library(readr)
nfl_suspensions_data <- read_csv("Development/Projects/nfl-suspensions-data.csv")
View(nfl_suspensions_data)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
nfl_suspensions
nfl_suspensions %>%
filter(year == 2012)
library(tidyverse)
nfl_suspensions %>%
filter(year == 2012)
view(nfl_suspensions %>%
filter(year == 2012))
len(nfl_suspensions %>%
filter(year == 2012))
filter(year == 2012))
length(nfl_suspensions %>%
filter(year == 2012))
nfl_suspensions %>%
filter(year == 2012)
library(readr)
nfl_suspensions_data <- read_csv("Development/Projects/nfl-suspensions-data.csv")
View(nfl_suspensions_data)
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
view(nfl_suspensions)
all_years <- tibble(Year = 1986:2014)
nfl_data_complete <- all_years %>%
left_join(nfl_data, by = "Year") %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
nfl_data_complete <- all_years %>%
left_join(nfl_suspensions, by = "Year") %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
nfl_data_complete <- all_years %>%
left_join(nfl_suspensions, by = "year") %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(Year = 1986:2015)
nfl_data_complete <- all_years %>%
left_join(nfl_suspensions, by = c("Year" = "Year")) %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(Year = 1986:2015)
nfl_data_complete <- all_years %>%
left_join(nfl_suspensions, by = c("year" = "year")) %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(year = 1986:2015)
nfl_data_complete <- all_years %>%
left_join(nfl_suspensions, by = c("year" = "year")) %>%
mutate(Suspensions = ifelse(is.na(Suspensions), 0, Suspensions))
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(Year = 1986:2015)
nfl_suspensions_2 <- all_years %>%
left_join(nfl_suspensions, by = "year") %>%
group_by(year) %>%
summarize(suspensions_count = n())
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(year = 1986:2015)
nfl_suspensions_2 <- all_years %>%
left_join(nfl_suspensions, by = "Year") %>%
group_by(year) %>%
summarize(suspensions_count = n())
library(tidyverse)
nfl_suspensions <- read_csv("Development/Projects/nfl-suspensions-data.csv")
all_years <- tibble(year = 1986:2015)
nfl_suspensions_2 <- all_years %>%
left_join(nfl_suspensions, by = "year") %>%
group_by(year) %>%
summarize(suspensions_count = n())
write.csv(nfl_suspensions_2, "nfl_supsensions_2.csv", row.names = FALSE)
view(nfl_suspensions_2)
nfl_suspensions_updated <- nfl_suspensions %>%
left_join(nfl_suspensions_2, by = "year")
view(nfl_suspensions_updated)
view(nfl_data_updated)
nfl_data_updated <- nfl_data %>%
full_join(nfl_suspensions_2, by = "year")
nfl_suspensions_updated <- nfl_suspensions %>%
full_join(nfl_suspensions_2, by = "year")
nfl_suspensions_updated$games[is.na(nfl_suspensions_updated$games)] <- 0
unique(nfl_suspensions_updated$Year)
unique(nfl_suspensions_updated$year)
install.packages('Rserve')
library(Rserve)
Rserve(args=“–no-save”)
library(Rserve)
Rserve(args = "--no-save")
library(tidyverse)
library(vroom)
library(tidymodels)
library(forecast)
library(patchwork)
library(gridExtra)
library(ranger)
library(modeltime) #Extensions of tidymodels to time series
library(timetk) #Some nice time series functions
library(plotly)
setwd("~/Desktop/STAT348/StoreDemand")
train <- vroom("./train.csv")
test <- vroom("./test.csv")
storeItem <- train %>% filter(store==3, item==17)
cv_split <- time_series_split(storeItem, assess="3 months", cumulative = TRUE)
cv_split %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split))
## Cross-validate to tune model
cv_results <- modeltime_calibrate(es_model,
new_data = testing(cv_split))
## Visualize CV results
p1 <- cv_results %>%
modeltime_forecast(
new_data    = testing(cv_split),
actual_data = train
)%>% plot_modeltime_forecast(.interactive=TRUE)
# Evaluate the accuracy
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
# Refit to all data then forecast
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(h= '3 months') %>%
rename(date = .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y = test, by = 'date') %>%
select(id, sales)
p2 <- es_fullfit %>%
modeltime_forecast(h = '3 months', actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1, p2, nrows = 2, shareX = TRUE, shareY = TRUE)
p2 <- es_fullfit %>%
modeltime_forecast(h = '3 months', actual_data = storeItem) %>%
plot_modeltime_forecast(.interactive = FALSE)
p2
cv_split %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split))
## Cross-validate to tune model
cv_results <- modeltime_calibrate(es_model,
new_data = testing(cv_split))
## Visualize CV results
p1 <- cv_results %>%
modeltime_forecast(
new_data    = testing(cv_split),
actual_data = storeItem
)%>% plot_modeltime_forecast(.interactive=TRUE)
# Evaluate the accuracy
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
# Refit to all data then forecast
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(h= '3 months') %>%
rename(date = .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y = test, by = 'date') %>%
select(id, sales)
p2 <- es_fullfit %>%
modeltime_forecast(h = '3 months', actual_data = storeItem) %>%
plot_modeltime_forecast(.interactive = FALSE)
p2
plotly::subplot(p1, p2, nrows = 2)
storeItem2 <- train %>% filter(store==4, item==4)
cv_split <- time_series_split(storeItem2, assess="3 months", cumulative = TRUE)
cv_split %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split))
## Cross-validate to tune model
cv_results <- modeltime_calibrate(es_model,
new_data = testing(cv_split))
## Visualize CV results
p3 <- cv_results %>%
modeltime_forecast(
new_data    = testing(cv_split),
actual_data = storeItem2
)%>% plot_modeltime_forecast(.interactive=TRUE)
# Evaluate the accuracy
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
# Refit to all data then forecast
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(h= '3 months') %>%
rename(date = .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y = test, by = 'date') %>%
select(id, sales)
p4 <- es_fullfit %>%
modeltime_forecast(h = '3 months', actual_data = storeItem2) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1,p3,p2,p4, nrows = 2)
submission <- plotly::subplot(p1,p3,p2,p4, nrows = 2)
ggsave("exp_smooth_plots.png", submission)
